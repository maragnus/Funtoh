@page "/search/promoter/hustles"
@page "/search/promoter/hustles/{HustleId:guid}"
@page "/search/promoter/hustles/{SimilarHustleId:guid}/similar"
@page "/search/promoter/hustles/{SimilarHustleId:guid}/similar/{HustleId:guid}"

@rendermode InteractiveServer
@layout AppLayout

<div class="search-bar mt-4 mx-4">
    <form action="/search/promoter/hustles" method="get">
    <div class="input-group mb-3">
        @if (SimilarHustle == null)
        {
            <input type="text" name="q" class="form-control" placeholder="Search" aria-label="Search query" aria-describedby="button-search" @bind-value="@Query">
            <button class="btn btn-outline-secondary" type="submit" id="button-search"><i class="fa-regular fa-magnifying-glass"></i> Search</button>
        }
        else
        {
            <span class="input-group-text">Similar to</span>
            <div class="form-control" aria-label="Search query" aria-describedby="button-clear">
                @SimilarHustle.Title
            </div>
            <a class="btn btn-outline-secondary" id="button-clear" href="/search/promoter/hustles"><i class="fa-regular fa-x"></i> Start Over</a>
        }
    </div>
    </form>
</div>

<main class="row mx-4">
    @{
        var isHustleSelected = HustleId.HasValue;
        var hidden = " d-none d-md-block d-lg-block";
        var leftClass =
            "col-12 col-md-4 col-lg-3 p-0 pe-2 pb-4"
            + (isHustleSelected ? hidden : "");
        var rightClass =
            "col-12 col-md-8 col-lg-9 p-0 ps-md-2 ps-lg-2 pb-4"
            + (isHustleSelected ? "" : hidden);
    }
    <div class="@leftClass" style="height: 100%; overflow-y: auto">
        <div class="vertical-list">
            @foreach (var hustle in Hustles)
            {
                var url = SimilarHustleId.HasValue
                    ? $"/search/promoter/hustles/{SimilarHustleId}/similar/{hustle.HustleId}"
                    : $"/search/promoter/hustles/{hustle.HustleId}";
                <HustleCard Hustle="@hustle" Href="@url"/>
            }
        </div>
    </div>
    <div class="@rightClass" style="height: 100%; overflow-y: auto">
        @if (Hustle == Hustle.Empty)
        {
            <div class="px-5">
                <p>Alright, money-maker! 💰 You’re on the search page, which means you’re just one step away from finding the perfect Hustle to boost a brand and line your pockets. Cha-ching! 🤑</p>
                <p>Now, you’ve got two ways to kick this off:</p>
                <ul>
                    <li>Select a Hustle that catches your eye and dive into the details. See what’s waiting for your skills! 🔍</li>
                    <li>Refine your search if you’ve got a specific gig in mind—'cause why not aim for exactly what you want? 🎯</li>
                </ul>
                <p>Time to roll up those sleeves, grab a Hustle, and show ‘em what you’re made of! 💥</p>
            </div>
        }
        else
        {
            var hustleUrl = $"/hustles/{Hustle.HustleId}";
            var similarUrl = $"/search/promoter/hustles/{Hustle.HustleId}/similar";
            var createUrl = $"/search/promoter/create/{Hustle.HustleId}";
            var backUrl = SimilarHustleId.HasValue
                ? $"/search/promoter/hustles/{SimilarHustleId}/similar"
                : $"/search/promoter/hustles#{HustleId?.ToString("N")}";
            <a href="@backUrl" class="btn btn-primary mb-4 d-inline-block d-md-none d-lg-none"><i class="fa-regular fa-hand-back-point-left"></i> Back to results</a>
            <HustleCard Hustle="@Hustle" ShowDescription ShowHustler/>
            <div class="horizontal-list mt-4">
                <a class="btn btn-primary" href="@hustleUrl">More information</a>
                <a class="btn btn-primary" href="@similarUrl">Similar hustles</a>
                <a class="btn btn-primary" href="@createUrl">Create a hustle</a>
            </div>
        }
    </div>
</main>

@inject NavigationManager NavigationManager
@inject DataContext DataContext
@inject IJSRuntime Js

@code {
    [SupplyParameterFromQuery(Name = "q")] public string? Query { get; set; }
    [Parameter] public Guid? HustleId { get; set; }
    [Parameter] public Guid? SimilarHustleId { get; set; }
    private Hustle[] AllHustles { get; set; } = [];
    private Hustle[] Hustles { get; set; } = [];
    private Hustle Hustle { get; set; } = Hustle.Empty;
    private Hustle? SimilarHustle { get; set; }

    protected override void OnInitialized()
    {
        AllHustles = DataContext.Hustles.Where(hustle => hustle.Type == HustleType.Sponsor).ToArray();
    }

    protected override void OnParametersSet()
    {
        Hustle = HustleId.HasValue ? DataContext.FindHustle(HustleId.Value) : Hustle.Empty;
        SimilarHustle = SimilarHustleId.HasValue ? DataContext.FindHustle(SimilarHustleId.Value) : null;

        if (SimilarHustle is null)
        {
            Hustles = AllHustles.Take(25).ToArray();
            return;
        }

        var categories = SimilarHustle.Categories;
        Hustles = AllHustles.Select(hustle => new { Count = hustle.Categories.Intersect(categories).Count(), Hustle = hustle })
            .Where(item => item.Count > 0)
            .OrderBy(item => item.Count)
            .ThenBy(item => item.Hustle.HustleId)
            .Select(item => item.Hustle)
            .ToArray();
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        var fragment = new Uri(NavigationManager.Uri, UriKind.Absolute).Fragment.TrimStart('#');
        if (!string.IsNullOrWhiteSpace(fragment))
            await Js.InvokeVoidAsync("jumpTo", fragment);
    }
}